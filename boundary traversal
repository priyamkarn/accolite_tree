void addLeftBoundary(TreeNode* root, vector<int>& result) {
    if (root == nullptr || (root->left == nullptr && root->right == nullptr)) {
        return;
    }

    result.push_back(root->val);

    if (root->left != nullptr) {
        addLeftBoundary(root->left, result);
    } else {
        addLeftBoundary(root->right, result);
    }
}

void addRightBoundary(TreeNode* root, vector<int>& result) {
    if (root == nullptr || (root->left == nullptr && root->right == nullptr)) {
        return;
    }

    if (root->right != nullptr) {
        addRightBoundary(root->right, result);
    } else {
        addRightBoundary(root->left, result);
    }

    result.push_back(root->val);
}

void addLeaves(TreeNode* root, vector<int>& result) {
    if (root == nullptr) {
        return;
    }

    if (root->left == nullptr && root->right == nullptr) {
        result.push_back(root->val);
        return;
    }

    addLeaves(root->left, result);
    addLeaves(root->right, result);
}

vector<int> boundaryTraversal(TreeNode* root) {
    vector<int> result;

    if (root == nullptr) {
        return result;
    }

    result.push_back(root->val);

    addLeftBoundary(root->left, result);
    addLeaves(root, result);
    addRightBoundary(root->right, result);

    return result;
}
